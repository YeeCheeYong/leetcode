/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    
    private HashMap<Node,Node>h;

    public Node cloneGraph(Node node) {

if(node==null)return null;
h=new HashMap<>();
Node copy=dfs(node);
return copy;




    }
        public Node dfs(Node node) {
if(h.containsKey(node))return h.get(node);
Node copy=new Node(node.val);
h.put(node,copy);
for(Node n:node.neighbors)
{
    copy.neighbors.add(dfs(n));
}
return copy;


    }
}
